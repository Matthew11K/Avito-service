// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pvz "avito/internal/domain/pvz"
)

// PVZService is an autogenerated mock type for the PVZService type
type PVZService struct {
	mock.Mock
}

// CreatePVZ provides a mock function with given fields: ctx, req
func (_m *PVZService) CreatePVZ(ctx context.Context, req pvz.CreatePVZRequest) (*pvz.PVZ, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVZ")
	}

	var r0 *pvz.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pvz.CreatePVZRequest) (*pvz.PVZ, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pvz.CreatePVZRequest) *pvz.PVZ); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pvz.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pvz.CreatePVZRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPVZs provides a mock function with given fields: ctx, req
func (_m *PVZService) GetPVZs(ctx context.Context, req pvz.GetPVZsRequest) ([]pvz.WithReceptions, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPVZs")
	}

	var r0 []pvz.WithReceptions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pvz.GetPVZsRequest) ([]pvz.WithReceptions, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pvz.GetPVZsRequest) []pvz.WithReceptions); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pvz.WithReceptions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pvz.GetPVZsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPVZService creates a new instance of PVZService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZService {
	mock := &PVZService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
