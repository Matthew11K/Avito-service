// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	pvz "avito/internal/domain/pvz"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PVZRepository is an autogenerated mock type for the PVZRepository type
type PVZRepository struct {
	mock.Mock
}

// GetPVZByID provides a mock function with given fields: ctx, id
func (_m *PVZRepository) GetPVZByID(ctx context.Context, id uuid.UUID) (*pvz.PVZ, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPVZByID")
	}

	var r0 *pvz.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pvz.PVZ, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pvz.PVZ); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pvz.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPVZRepository creates a new instance of PVZRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZRepository {
	mock := &PVZRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
